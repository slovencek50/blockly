{namespace turtlepage}

/**
 * This is a Closure Template.  Build multilingually:
 *
 * # Create en.js if that's the only language you care about.
 * java -jar ../_soy/SoyToJsSrcCompiler.jar --outputPathFormat generated/en.js --srcs template.soy
 *
 * # To fully internationalize, follow these steps...
 * # Extract messages from template.soy.
 * java -jar ../_soy/SoyMsgExtractor.jar --outputFile extracted_msgs.xlf template.soy
 *
 * # Create en.json, qqq.json.
 * ../../i18n/xliff_to_json.py extracted_msgs.xlf
 *
 * Once translations have been made into <LANG>.json:
 *
 * # Create *.js for each *.json file.  By default, qqq.json and keys.json are skipped.
 * ../../i18n/json_to_js.py --path_to_jar=../_soy *.json
 */

/**
 * Web page structure.
 */
{template .start}
  <div id="MSG" style="display: none">
    // Used in blocks.js for general turtle graphics blocks
    <span id="colourTooltip">{msg meaning="Turtle.colourTooltip" desc="TODO"}Changes the color of the pen.{/msg}</span>
    <span id="degrees">{msg meaning="Turtle.degrees" desc="TODO"}degrees{/msg}</span>
    <span id="hideTurtle">{msg meaning="Turtle.hideTurtle" desc="TODO"}hide turtle{/msg}</span>
    <span id="moveBackward">{msg meaning="Turtle.moveBackward" desc="TODO"}move backward by{/msg}</span>
    <span id="moveForward">{msg meaning="Turtle.moveForward" desc="TODO"}move forward by{/msg}</span>
    <span id="moveForwardTooltip">{msg meaning="Turtle.moveForwardTooltip" desc="TODO"}Moves the turtle forward.{/msg}</span>
    <span id="moveTooltip">{msg meaning="Turtle.moveTooltip" desc="TODO"}Moves the turtle forward or backward by the specified amount.{/msg}</span>
    <span id="nextLevel">{msg meaning="Turtle.nextLevel" desc="TODO"}Congratulations!  Would you like to proceed to the next level?{/msg}</span>
    <span id="penDown">{msg meaning="Turtle.penDown" desc="TODO"}pen down{/msg}</span>
    <span id="penTooltip">{msg meaning="Turtle.penTooltip" desc="TODO"}Lifts or lowers the pen, to start or stop drawing.{/msg}</span>
    <span id="penUp">{msg meaning="Turtle.penUp" desc="TODO"}pen up{/msg}</span>
    <span id="pixels">{msg meaning="Turtle.pixels" desc="TODO"}pixels{/msg}</span>
    <span id="setColour">{msg meaning="Turtle.setColour" desc="TODO"}set color{/msg}</span>
    <span id="setWidth">{msg meaning="Turtle.setWidth" desc="TODO"}set width{/msg}</span>
    <span id="showTurtle">{msg meaning="Turtle.showTurtle" desc="TODO"}show turtle{/msg}</span>
    <span id="turnLeft">{msg meaning="Turtle.turnLeft" desc="TODO"}turn left by{/msg}</span>
    <span id="turnRightTooltip">{msg meaning="Turtle.turnRightTooltip" desc="TODO"}Turns the turtle right by the specified angle.{/msg}</span>
    <span id="turnRight">{msg meaning="Turtle.turnRight" desc="TODO"}turn right by{/msg}</span>
    <span id="turnTooltip">{msg meaning="Turtle.turnTooltip" desc="TODO"}Turns the turtle left or right by the specified number of degrees.{/msg}</span>
    <span id="turtleVisibilityTooltip">{msg meaning="Turtle.turtleVisibilityTooltip" desc="TODO"}Makes the turtle (green circle and arrow) visible or invisible.{/msg}</span>
    <span id="widthTooltip">{msg meaning="Turtle.widthTooltip" desc="TODO"}Changes the width of the pen.{/msg}</span>
    <span id="loopVariable">{msg meaning="Turtle.loopVariable" desc="TODO"}counter{/msg}</span>

    // Used in blocks.js for tutorial-only blocks.
    <span id="drawASquare">{msg meaning="Turtle.drawASquare" desc="TODO"}draw a square{/msg}</span>
    <span id="lengthParameter">{msg meaning="Turtle.lengthParameter" desc="TODO"}length{/msg}</span>
    <span id="drawASnowball">{msg meaning="Turtle.drawASnowball" desc="TODO"}draw a snowball{/msg}</span>
    <span id="diameterParameter">{msg meaning="Turtle.diameterParameter" desc="TODO"}diameter{/msg}</span>

    // Used in turtle.js
    <span id="title">{msg meaning="Turtle.title" desc="TODO"}Turtle Graphics %1{/msg}</span>
  </div>
  // Firefox doesn't like scripts inside tables.
  <script type="text/javascript" src="../slider.js"></script>
  <script type="text/javascript" src="../blockly_compressed.js"></script>
  <script type="text/javascript" src="../javascript_compressed.js"></script>
  <script type="text/javascript">
    BlocklyApps.loadLanguageScripts(languageSrc);
  </script>
  <script type="text/javascript" src="blocks.js"></script>
  <script type="text/javascript" src="answers.js"></script>

  // Show the starting blocks for the given page and level.
  <div id="start_blocks" style="display: none">
    {if $ij.page == 1}
      {switch $ij.level}
        {case 1, 2}
          <block type="draw_move_forward_inline" x="20" y="20"></block>
        {case 3, 4, 5, 6, 7}
          <block type="controls_repeat" x="20" y="20">
            <title name="TIMES">{if $ij.level == 3 or $ij.level == 6 or $ij.level == 7}4{else}3{/if}</title>
          </block>
        {case 8}
          <block type="draw_colour" x="20" y="100">
            <value name="COLOUR">
              <block type="colour_random"></block>
            </value>
            <next>
              <block type="draw_move_inline">
                <title name="DIR">moveForward</title>
                <title name="VALUE">100</title>
                <next>
                  <block type="draw_move_inline">
                    <title name="DIR">moveBackward</title>
                    <title name="VALUE">100</title>
                    <next>
                      <block type="draw_turn_inline">
                        <title name="DIR">turnRight</title>
                        <title name="VALUE">45</title>
                      </block>
                    </next>
                  </block>
                </next>
              </block>
            </next>
          </block>
        {case 9}
          <block type="controls_repeat" editable="false" deleteable="false" movable="false" x="20" y="20">
            <title name="TIMES">??</title>
            <statement name="DO">
              <block type="draw_move" editable="false" deleteable="false" movable="false">
                <value name="VALUE">
                  <block type="math_number" editable="false" deleteable="false" movable="false">
                    <title name="NUM">1</title>
                  </block>
                </value>
                <next>
                  <block type="draw_turn" editable="false" deleteable="false" movable="false">
                    <value name="VALUE">
                      <block type="math_number" editable="false" deleteable="false" movable="false">
                        <title name="NUM">1</title>
                      </block>
                    </value>
                  </block>
                </next>
              </block>
            </statement>
          </block>
        {case 10}
          <block type="draw_move_inline" x="20" y="20">
            <title name="DIR">moveForward</title>
            <title name="VALUE">100</title>
          </block>
      {/switch}
    {elseif $ij.page == 2}
      // No blocks are provided for levels 1 and 2.
      {if $ij.level == 3 or $ij.level == 5}
        /*  Call "draw a square".  */
        <block type="draw_a_square" inline="true">
          <value name="VALUE">
            <block type="math_number">
              <title name="NUM">{if $ij.level == 3}100{else}50{/if}</title>
            </block>
          </value>
        </block>
      {elseif $ij.level == 4}
        /*  Three-square code.  */
        <block type="controls_repeat_ext" editable="false" deleteable="false" movable="false">
          <value name="TIMES">
            <block type="math_number" readOnly="false" deleteable="true" movable="false">
              <title name="NUM">3</title>
            </block>
          </value>
          <statement name="DO">
            <block type="draw_colour">
              <value name="COLOUR">
                <block type="colour_random"></block>
              </value>
              <next>
                <block type="draw_a_square" inline="true" editable="false" deleteable="false" movable="false">
                  <value name="VALUE">
                    <block type="math_number" editable="false" deleteable="false" movable="false">
                      <title name="NUM">100</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_turn" editable="false" deleteable="false" movable="false">
                      <value name="VALUE">
                        <block type="math_number" editable="false" deleteable="false" movable="false">
                          <title name="NUM">120</title>
                        </block>
                      </value>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
      {elseif $ij.level == 6 or $ij.level == 7}
        <block type="controls_for_counter" inline="true" x="20" y="20">
          <title name="VAR">{msg meaning="Turtle.loopVariable" desc="IBID"}counter{/msg}</title>
          <value name="FROM">
            <block type="math_number">
              <title name="NUM">{if $ij.level == 6}50{else}10{/if}</title>
            </block>
          </value>
          <value name="TO">
            <block type="math_number">
              <title name="NUM">{if $ij.level == 6}90{else}100{/if}</title>
            </block>
          </value>
          <value name="BY">
            <block type="math_number">
              <title name="NUM">10</title>
            </block>
          </value>
          <statement name="DO">
            <block type="draw_a_square" inline="true">
              {if $ij.level == 6}
                <value name="VALUE">
                  <block type="math_number">
                    <title name="NUM">10</title>
                  </block>
                </value>
              {/if}
            </block>
          </statement>
        </block>
      {elseif $ij.level == 8}
        {for $i in range(25, 61, 5)}
          <block type="draw_move" {if $i == 25}x="300" y="100"{/if} inline="false" editable="false" disabled="true">
            <title name="DIR">moveForward</title>
              <value name="VALUE">
                <block type="math_number">
                  <title name="NUM">{$i}</title>
                </block>
              </value>
              <next>
                <block type="draw_turn" inline="false" editable="false" disabled="true">
                  <title name="DIR">turnRight</title>
                  <value name="VALUE">
                    <block type="math_number">
                      <title name="NUM">90</title>
                    </block>
                  </value>
                  <next>
        {/for}
        {for $i in range(5, 25, 5)}
                </block>
              </next>
            </block>
          </next>
        {/for}
      {elseif $ij.level == 11}
        <block type="draw_width" inline="false" x="158" y="67">
          <value name="WIDTH">
            <block type="math_number">
              <title name="NUM">1</title>
            </block>
          </value>
          <next>
            <block type="controls_for_counter" inline="true">
              <title name="VAR">length</title>
              <value name="FROM">
                <block type="math_number">
                  <title name="NUM">1</title>
                </block>
              </value>
              <value name="TO">
                <block type="math_number">
                  <title name="NUM">100</title>
                </block>
              </value>
              <value name="BY">
                <block type="math_number">
                  <title name="NUM">1</title>
                </block>
              </value>
              <statement name="DO">
                <block type="draw_move" inline="false">
                  <title name="DIR">moveForward</title>
                  <value name="VALUE">
                    <block type="variables_get_length"></block>
                  </value>
                  <next>
                    <block type="draw_turn" inline="false">
                      <title name="DIR">turnRight</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">91</title>
                        </block>
                      </value>
                    </block>
                  </next>
                </block>
              </statement>
              <next>
                <block type="turtle_visibility">
                  <title name="VISIBILITY">hideTurtle</title>
                </block>
              </next>
            </block>
          </next>
        </block>
      {/if}
    {else}  // page == 3
      {if $ij.level != 7}
        /*  Define "draw a square".  */
        <block type="procedures_defnoreturn" x="20" y="20" editable="false" deletable="false" movable="false">
          <mutation>
          {if $ij.level >= 4}
            <arg name="length"></arg>
          {/if}
          </mutation>
          <title name="NAME">draw a square</title>
          <statement name="STACK">
            <block type="controls_repeat_ext" editable="false" deleteable="false" movable="false">
              <value name="TIMES">
                <block type="math_number" editable="false" deleteable="false" movable="false">
                  <title name="NUM">4</title>
                </block>
              </value>
              <statement name="DO">
                <block type="draw_move" editable="false" deleteable="false" movable="false">
                  <value name="VALUE">
                    {if $ij.page == 2 or ($ij.page == 3 and $ij.level >= 4)}
`                     <block type="variables_get_length"></block>
                    {else}
                      <block type="math_number" editable="false" deleteable="false" movable="false">
                        <title name="NUM">100</title>
                      </block>
                    {/if}
                  </value>
                  <next>
                    <block type="draw_turn" editable="false" deleteable="false" movable="false">
                      <value name="VALUE">
                        <block type="math_number" editable="false" deleteable="false" movable="false">
                          <title name="NUM">90</title>
                        </block>
                      </value>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </statement>
        </block>
        {if $ij.level == 1}
          <block type="procedures_defnoreturn" x="20" y="175">
            <title name="NAME">draw ??</title>
          </block>
        {elseif $ij.level >= 2}
          /*  Define "draw a triangle".  */
          <block type="procedures_defnoreturn" x="20" y="175">
            <mutation>
              {if $ij.level >= 5}
                <arg name="length"></arg>
              {/if}
            </mutation>
            <title name="NAME">draw a triangle</title>
            {if $ij.level >= 2}
              <statement name="STACK">
                <block type="controls_repeat_ext">
                  <value name="TIMES">
                    <block type="math_number">
                      <title name="NUM">3</title>
                    </block>
                  </value>
                  <statement name="DO">
                    <block type="draw_move" inline="false">
                      <title name="DIR">moveForward</title>
                      <value name="VALUE">
                      {if $ij.level >= 5}
  `                     <block type="variables_get_length"></block>
                      {else}
                        <block type="math_number">
                          <title name="NUM">100</title>
                        </block>
                      {/if}
                      </value>
                      <next>
                        <block type="draw_turn" inline="false">
                          <title name="DIR">turnRight</title>
                          <value name="VALUE">
                            <block type="math_number">
                              <title name="NUM">120</title>
                            </block>
                          </value>
                        </block>
                      </next>
                    </block>
                  </statement>
                </block>
              </statement>
            {/if}
          {/if}
        </block>
        {if $ij.level == 4}
          <block type="controls_for_counter" inline="true" x="20" y="170">
            <value name="FROM">
              <block type="math_number">
                <title name="NUM">10</title>
              </block>
            </value>
            <value name="TO">
              <block type="math_number">
                <title name="NUM">100</title>
              </block>
            </value>
            <value name="BY">
              <block type="math_number">
                <title name="NUM">10</title>
              </block>
            </value>
            <statement name="DO">
              <block type="draw_colour">
                <value name="COLOUR">
                  <block type="colour_random"></block>
                </value>
                <next>
                  <block type="procedures_callnoreturn" inline="false">
                    <mutation name="draw a square">
                      <arg name="length"></arg>
                    </mutation>
                    <value name="ARG0">
                      <block type="variables_get">
                        <title name="VAR">{msg meaning="Turtle.loopVariable" desc="IBID"}counter{/msg}</title>
                      </block>
                    </value>
                  </block>
                </next>
              </block>
            </statement>
          </block>
        {elseif $ij.level == 5}
          /*  Define "draw a house".  */
          <block type="procedures_defnoreturn" x="20" y="350">
            <mutation>
              {if $ij.level == 11}<arg name="length"></arg>{/if}
            </mutation>
            <title name="NAME">draw a house</title>
            <statement name="STACK">
              <block type="procedures_callnoreturn" inline="false">
                <mutation name="draw a square">
                  <arg name="length">
                </mutation>
                <value name="ARG0">
                  {if $ij.level == 5}
                    <block type="math_number">
                      <title name="NUM">100</title>
                    </block>
                  {else}
                    <block type="variables_get_length"></block>
                  {/if}
                </value>
                <next>
                  <block type="draw_move" inline="false">
                    <title name="DIR">moveForward</title>
                    <value name="VALUE">
                      {if $ij.level == 5}
                        <block type="math_number">
                          <title name="NUM">100</title>
                        </block>
                      {else}
                        <block type="variables_get_length"></block>
                      {/if}
                    </value>
                    <next>
                      <block type="draw_turn" inline="false">
                        <title name="DIR">turnRight</title>
                        <value name="VALUE">
                          <block type="math_number">
                            <title name="NUM">30</title>
                          </block>
                        </value>
                        <next>
                          <block type="procedures_callnoreturn" inline="false">
                            <mutation name="draw a triangle">
                              <arg name="length"></arg>
                            </mutation>
                            <value name="ARG0">
                              {if $ij.level == 5}
                                <block type="math_number">
                                  <title name="NUM">100</title>
                                </block>
                              {else}
                                <block type="variables_get_length"></block>
                              {/if}
                            </value>
                          </block>
                        </next>
                      </block>
                    </next>
                  </block>
                </next>
              </block>
            </statement>
          </block>
        {/if}
      {/if}  /* End of region in which "draw a square" is defined.  */
    {/if}
  </div>

  <table width="100%" height="100%">
    <tr>
      <td width="{if $ij.reinf and $ij.reinf != 0}100%{else}410{/if}" valign="top">
        <h1><a href="../">MOOC</a> &gt;{sp} Turtle</h1>

        /* INTERSTITIALS.
         *
         * Show interstitial message if one is specified.
         * A specification consists of an array of 1 or more elements:
         *   0: A string to be displayed.
         *   1: One of the following strings (unless nothing more should be
         *      done):
         *      - 'picture', in which case the specified picture is displayed.
         *      - 'picture-table', in which case the specified pictures are
         *        displayed in a table, one per column.
         *      - 'quiz', in which case a question picture and set of answers
         *        are displayed; the user selects an answer; and the answer is
         *        checked.  The user is not allowed to continue until the
         *        correct answer has been chosen.
         *      - 'animations', in which the specified images are hidden until
         *        the user presses a "Show me" button.
         *      - 'special', in which case special-purpose code based on the
         *        page and level can be hardcoded below.
         *   2: Presence and contents depend on previous cell value:
         *      - 'animations': an array of URLs of animated gifs to display.
         *      - 'picture': the URL of the picture to display.
         *      - 'picture-table': an array of URLs of pictures to display.
         *      - 'quiz': an array of two number, the first being the number of
         *         quiz answer and the second the index of the correct answer,
         *         both 1-based.  (Image file names are built up automatically
         *         based on the page number, level number, and choice number.
         *         For example, if there is a quiz on page 1, level 2, the
         *         question would be in the image 'p1-l2-q.png', and the third
         *         displayed possible answer would be 'p1-l2-a3.png'.)
         *      - 'special': unspecified.
         */
        {if $ij.reinf}
          {if $ij.reinf[0]}
            <div id="bubble">
              <div id="hint"><b>{$ij.reinf[0]}</b></div>
            </div>
            <img id="turtle" height=45 width=130 src="turtle.png">
          {/if}
          {switch $ij.reinf[1]}
            {case 'picture'}
              <table>
                <tr><br></tr>
                <tr><td><img src="{$ij.reinf[2]}"></td></tr>
                <tr height=40><br><br></tr>
              </table>
            {case 'picture-table'}
              <table>
                {foreach $tuple in $ij.reinf[2]}
                  <tr height="100" valign="middle">
                    <td><img src="{$tuple[1]}"></td><td>{$tuple[0]}</td>
                  </tr>
                {/foreach}
              </table>
            {case 'quiz'}
              <table>
                <tr><td colspan={$ij.reinf[2][0]}><img src="p{$ij.page}-l{$ij.level}-q.png"></td></tr>
                <tr>
                  {for $i in range(1, $ij.reinf[2][0] + 1)}
                    <td><img src="p{$ij.page}-l{$ij.level}-a{$i}.png" class="answer" onclick="alert({if $i == $ij.reinf[2][1]}'{msg meaning="Turtle.rightAnswer" desc="TODO"}You got it!{/msg}'); document.getElementById('continueButton').style.display = 'inline';{else}'{msg meaning="Turtle.wrongAnswer" desc="TODO"}Wrong!  Try again.{/msg}');{/if}"></td>
                  {/for}
                </tr>
              </table>
            {case 'animations'}
              <p><button id="showButton" style="display: inline" class="launch" onclick="this.style.display = 'none'; document.getElementById('animation').style.display='inline'; document.getElementById('continueButton').style.display='inline';">{msg meaning="Turtle.showMe" desc="TODO"}Show me{/msg}</button></p>
              <div id="animation" style="display: none">
                <table>
                  <tr>
                    {foreach $file in $ij.reinf[2]}
                      <td><img src="{$file}"></td>
                    {/foreach}
                  </tr>
                </table>
              </div>
            {case 'special'}
              // Special cases can be implemented here.
          {/switch}
          <button id="continueButton" style="display: {if $ij.reinf[1] == 'quiz' or $ij.reinf[1] == 'animations'}none{else}inline{/if}" class="launch" onclick="Turtle.continueButtonClick();">{msg meaning="Turtle.gotoNext" desc="TODO"}Continue{/msg}</button>
        {else}
          // If we get here, this is a real level, not an interstitial.
          <p class="levelLine">{msg meaning="Turtle.level" desc="TODO"}Level{/msg}: &nbsp;
            {for $i in range(1, $ij.maxLevel + 1)}
              {if $i == $ij.level}
                <span class="tab" id="selected">{$i}</span>
              {else}
                <a class="tab" href="?page={$ij.page}&level={$i}">{$i}</a>
              {/if}
            {/for}
          </p>

          <div id="bubble">
            <div id="prompt">
              {switch $ij.page}
                {case 1}
                  {switch $ij.level}
                    {case 1}{msg meaning="Turtle.instructions1_1" desc="TODO"}I'm a turtle with a pen on my belly. Stack up blocks and press "Run Program" to make me draw the shown picture.{/msg}
                    {case 2}{msg meaning="Turtle.instructions1_2" desc="TODO"}Draw a square, making each side a different color.{/msg}
                    {case 3}{msg meaning="Turtle.instructions1_3" desc="TODO"}Make a square in only 3 blocks.  (Color blocks don't count.){/msg}
                    {case 4}{msg meaning="Turtle.instructions1_4" desc="TODO"}Draw a triangle whose sides are all 100 pixels and are in random colors.  You'll have to figure out how far to turn.{/msg}
                    {case 5}{msg meaning="Turtle.instructions1_5" desc="TODO"}Draw a triangle and then a square.{/msg}
                    {case 6}{msg meaning="Turtle.instructions1_6" desc="TODO"}Can you figure out how use a square and triangle to draw a red envelope?{/msg}
                    {case 7}{msg meaning="Turtle.instructions1_7" desc="TODO"}See if you can draw these glasses in your favorite color.{/msg}
                    {case 8}{msg meaning="Turtle.instructions1_8" desc="TODO"}After trying out these blocks, see what happens if you make them repeat 8 times.  It should look a little different every time you run it.{/msg}
                    {case 9}{msg meaning="Turtle.instructions1_9" desc="TODO"}Figure out what number to replace the question marks with to draw a circle.{/msg}
                    {case 10}{msg meaning="Turtle.instructions1_10" desc="TODO"}Draw anything you want. Some ideas are a stick figure, snowflake, or spiral. Have fun{/msg}
                  {/switch}
                {case 2}
                  {switch $ij.level}
                    {case 1}{msg meaning="Turtle.instructions2_1" desc="TODO"}Find the familiar blocks in the new categories to draw a square in your favorite color.{/msg}
                    {case 2}{msg meaning="Turtle.instructions2_2" desc="TODO"}Use the new "draw a square" box, found in the "Functions" category, to draw a small green square.{/msg}
                    {case 3}{msg meaning="Turtle.instructions2_3" desc="TODO"}Use the new block to draw 3 squares, 120 degrees apart, in random colors.{/msg}
                    {case 4}{msg meaning="Turtle.instructions2_4" desc="TODO"}Now change the code to draw 36 squares, each 10 degrees apart.{/msg}
                    {case 5}{msg meaning="Turtle.instructions2_5" desc="TODO"}Draw squares with sides of 50, 60, 70, 80, and 90 pixels.  You'll need lots of blocks.{/msg}
                    {case 6}{msg meaning="Turtle.instructions2_6" desc="TODO"}Modify this program to get the value of counter (in the Variables category) when drawing a square instead of the value 10.{/msg}
                    {case 7}{msg meaning="Turtle.instructions2_7" desc="TODO"}How about setting a random color before drawing each square and moving forward 10 pixels after each one?{/msg}
                    {case 8}{msg meaning="Turtle.instructions2_8" desc="TODO"}Replace the pale (disabled) blocks with a "count with" block to draw the same spiral.{/msg}
                    {case 9}{msg meaning="Turtle.instructions2_9" desc="TODO"}Draw a snowman by using the new "draw a snowball" function with inputs of 70, 50, and 30.{/msg}
                    {case 10}{msg meaning="Turtle.instructions2_10" desc="TODO"}Draw whatever you want.  One idea is experimenting with different types of spirals.  What happens if you change the turn amount, rather than the move amount?  TODO: Add starting blocks.{/msg}
                  {/switch}
                {case 3}
                  {switch $ij.level}
                    {case 1}{msg meaning="Turtle.instructions3_1" desc="TODO"}Using the "draw a square" function as an example, create a "draw a triangle" function and use it.{/msg}
                    {case 2}{msg meaning="Turtle.instructions3_2" desc="TODO"}See if you can figure out how to use "draw a square" and "draw a triangle" (and some other blocks) to draw a house.{/msg}
                    {case 3}{msg meaning="Turtle.instructions3_3" desc="TODO"}Create (and use) a new function to draw a house.{/msg}
                    {case 4}{msg meaning="Turtle.instructions3_4" desc="TODO"}Using "draw a square" as an example, add an input named "length" to "draw a triangle".  Then, draw triangles in different colors with side lengths of 50 and 100.{/msg}
                    {case 5}{msg meaning="Turtle.instructions3_5" desc="TODO"}Add a "length" input to "draw a house" and build a tiny house for my snail friend.{/msg}
                    {case 6}{msg meaning="Turtle.instructions3_6" desc="TODO"}Create a new block "draw a hexagon", similar to "draw a square", and use it to draw hexagons in different colors with sides of length 50 and 75.{/msg}
                    {case 7}{msg meaning="Turtle.instructions3_7" desc="TODO"}Rename "draw a hexagon" to "draw a polygon" and add an input named "sides".  You'll have to make some other changes, including the amount to turn.  Test your new block by drawing a red octagon (8-sided polygon) with sides of length 80.{/msg}
                    {case 8}{msg meaning="Turtle.instructions3_8" desc="TODO"}You're now free to do whatever you want.  One idea is to try running this program with different turn amounts (higher or lower than 90).  Other ideas are to draw a star, circle, heart, or animal.{/msg}
                {/switch}
              {/switch}
            </div>
          </div>
          <div id="capacity"></div>
          <img id="turtle" height=45 width=130 src="turtle.png">

          <div>
            <canvas id="scratch" width="400" height="400" style="display: none"></canvas>
            <canvas id="answer" width="400" height="400" style="display: none"></canvas>
            <canvas id="display" width="400" height="400"></canvas>
          </div>
          <table style="padding-top: 1em;">
            <tr>
              <td style="width: 190px; text-align: center">
                <svg
                   id="slider"
                   xmlns="http://www.w3.org/2000/svg"
                   xmlns:svg="http://www.w3.org/2000/svg"
                   xmlns:xlink="http://www.w3.org/1999/xlink"
                   version="1.1"
                   width="150"
                   height="50">
                  <!-- Slow icon. -->
                  <clipPath id="slowClipPath">
                    <rect width=26 height=12 x=5 y=14 />
                  </clipPath>
                  <image xlink:href="icons.png" height=42 width=84 x=-21 y=-10
                      clip-path="url(#slowClipPath)" />
                  <!-- Fast icon. -->
                  <clipPath id="fastClipPath">
                    <rect width=26 height=16 x=120 y=10 />
                  </clipPath>
                  <image xlink:href="icons.png" height=42 width=84 x=120 y=-11
                      clip-path="url(#fastClipPath)" />
                </svg>
              </td>
              <td style="width: 15px;">
                <img id="spinner" style="visibility: hidden;" src="loading.gif" height=15 width=15>
              </td>
              <td style="width: 190px; text-align: center">
                <button id="runButton" class="launch" onclick="Turtle.runButtonClick();">
                  {msg meaning="Turtle.runProgram" desc="TODO"}Run Program{/msg}
                </button>
                <button id="resetButton" class="launch" onclick="Turtle.resetButtonClick();" style="display: none">
                  {msg meaning="Turtle.resetProgram" desc="TODO"}Reset{/msg}
                </button>
              </td>
            </tr>
          </table>

          <div id="toolbarDiv">

            <button title="{msg meaning="Turtle.codeTooltip" desc="TODO"}See generated JavaScript code.{/msg}" onclick="BlocklyApps.showCode();">
              <img src='../media/1x1.gif' class="code">
            </button>
            <button id="linkButton" title="{msg meaning="Turtle.codeTooltip" desc="TODO"}See generated JavaScript code.{/msg}" onclick="BlocklyStorage.link();">
              <img src='../media/1x1.gif' class="link">
            </button>
          </div>
        </td>
      {/if}

      // The following code is run whether or not this is an interstitial page.
      <td valign="top">
        {if $ij.reinf == 0}
          {call .toolbox /}
        {/if}
        <script type="text/javascript" src="../blockly_compressed.js"></script>
        <script type="text/javascript" src="../javascript_compressed.js"></script>
        <script type="text/javascript" src="../common.js"></script>
        <script type="text/javascript">
          BlocklyApps.loadLanguageScripts(languageSrc);
        </script>
        <script type="text/javascript" src="blocks.js"></script>
        <script type="text/javascript" src="answers.js"></script>
        <div id="blockly"></div>
      </td>
    </tr>
  </table>
{/template}

/**
 * TOOLBOX.
 *
 * PAGE 1
 * ======
 * Within this page, blocks are only added, never taken away (although some are
 * replaced by more general versions).  Some levels don't add any blocks.
 *
 * Level 1 [el]: Adds move_forward_inline and turn_right_inline.
 * Level 2 [coloured square]: Adds draw_colour with colour_picker.
 * level 3 [square in three blocks]: Adds controls_repeat.
 * level 4 [triangle] Adds draw_colour with colour_random.
 * Level 5 [overlapping square and triangle (sideways envelope)]
 * Level 6 [envelope]
 * Level 7 [glasses]
 * Level 8 [spikes]
 * Level 9 [circle]
 * Level 10 [free play]
 *
 * PAGE 2
 * ======
 * Categories are introduced, with contents of:
 * - Actions
 *   - draw_move with math_number
 *   - draw_turn with math_number
 *   - turtle_visibility (show/hide turtle)
 * - Color
 *   - draw_colour (set colour) with colour_picker
 *   - draw_colour (set colour) with colour_random
 * - Loops
 *   - controls_repeat_ext
 *   - controls_for (added at level 6)
 * - Math
 *   - math_number
 * - Functions (added at level 2)
 *   - [call] draw a square
 *   - [call] draw a snowball (added at level 9)
 * - Variables (added at level 6)
 *   - get counter
 * Level 1 [square]
 * Level 2 [square by function call]
 * Level 3 [3 squares]
 * Level 4 [36 squares]
 * Level 5 [nested squares without controls_for]
 * Level 6 [nested squares with controls_for]
 * Level 7 [telescoping squares]
 * Level 8 [mini-spiral]
 * Level 9 [snowman]
 * Level 10 [free play]
 *
 * PAGE 3
 * ======
 * All levels have: draw_move, draw_turn, draw_colour with colour_picker,
 *                  draw_colour with colour_random, controls_repeat_ext,
 *                  turtle_visibility.
 * Variables and functions are manually added until Levels 7 and 8,
 * when the custom categories are used
 * Level 1 [create "draw a triangle"]
 * Level 2 [draw a house]
 * Level 3 [create "draw a house"]
 * Level 4 [add parameter to "draw a triangle"]
 * Level 5 [add parameter to "draw a house"]
 * Level 6 [creat "draw a hexagon"]
 * Level 7 [create "draw a polygon"]
 * Level 8 [play]: Add a whole bunch
 */
{template .toolbox}
  <xml id="toolbox" style="display: none">
    {if $ij.page == 1}
      <block type="draw_move{if $ij.level <= 5}_forward{/if}_inline"></block>">
      <block type="draw_turn{if $ij.level < 5}_right{/if}_inline{if $ij.level <= 8}_restricted{/if}">
        <title name="VALUE">90</title>
      </block>
      {if $ij.level >= 2}
        <block type="draw_colour">
          <value name="COLOUR">
            <block type="colour_picker"></block>
          </value>
        </block>
      {/if}
      {if $ij.level >= 4}   // Out of numeric order to make colour blocks adjacent.
        <block type="draw_colour">
          <value name="COLOUR">
            <block type="colour_random"></block>
          </value>
        </block>
      {/if}
      {if $ij.level >= 3}
        <block type="controls_repeat">
          <title name="TIMES">4</title>
        </block>
      {/if}
      {if $ij.level >= 7}
        <block type="turtle_visibility"></block>
      {/if}
    {elseif $ij.page == 2 or $ij.page == 3}
      <category name="{msg meaning="Turtle.catTurtle" desc="TODO"}Actions{/msg}">
        <block type="draw_move">
          <value name="VALUE">
            <block type="math_number">
              <title name="NUM">100</title>
            </block>
          </value>
        </block>
        </block>
        <block type="draw_turn">
          <value name="VALUE">
            <block type="math_number">
              <title name="NUM">90</title>
            </block>
          </value>
        </block>
        <block type="turtle_visibility"></block>
      </category>
      <category name="{msg meaning="Turtle.catColour" desc="TODO"}Color{/msg}">
        <block type="draw_colour">
          <value name="COLOUR">
            <block type="colour_picker"></block>
          </value>
        </block>
        <block type="draw_colour">
          <value name="COLOUR">
            <block type="colour_random"></block>
          </value>
        </block>
      </category>
      {if ($ij.page == 2 and $ij.level >= 2) or $ij.page == 3}
        <category name="{msg meaning="Turtle.catProcedures" desc="TODO"}Functions{/msg}">
        {if $ij.page == 2}
          <block type="draw_a_square" inline="true">
            <value name="VALUE">
              <block type="math_number">
                <title name="NUM">100</title>
              </block>
            </value>
          </block>
          {if $ij.level >= 9}
          <block type="draw_a_snowball" inline="true">
            <value name="VALUE">
              <block type="math_number">
                <title name="NUM">100</title>
              </block>
            </value>
          </block>
          {/if}
        {else} // page == 3
          {if $ij.level != 7}
            <block type="procedures_defnoreturn"></block>
            <block type="procedures_callnoreturn">
              <mutation name="draw a square">
                {if $ij.level >= 4}
                  <arg name="length"></arg>
                {/if}
              </mutation>
            </block>
            <block type="procedures_callnoreturn">
              <mutation name="draw a triangle">
                {if $ij.level >= 4}
                  <arg name="length"></arg>
                {/if}
              </mutation>
            </block>
          {/if}
          {if $ij.level == 3 or $ij.level == 5}
            <block type="procedures_callnoreturn">
              <mutation name="draw a house">
                {if $ij.level == 5}
                  <arg name="length"></arg>
                {/if}
              </mutation>
            </block>
          {elseif $ij.level == 6 or $ij.level == 8}
            <block type="procedures_callnoreturn">
              <mutation name="draw a hexagon">
                <arg name="length"></arg>
              </mutation>
            </block>
          {/if}
        {/if}
        </category>
      {/if}
      <category name="{msg meaning="Turtle.catControl" desc="TODO"}Loops{/msg}">
        <block type="controls_repeat_ext">
          <value name="TIMES">
            <block type="math_number">
              <title name="NUM">4</title>
            </block>
          </value>
        </block>
        {if $ij.level >= 5}
          <block type="controls_for_counter">
            <value name="FROM">
              <block type="math_number">
                <title name="NUM">1</title>
              </block>
            </value>
            <value name="TO">
              <block type="math_number">
                <title name="NUM">100</title>
              </block>
            </value>
            <value name="BY">
              <block type="math_number">
                <title name="NUM">10</title>
              </block>
            </value>
          </block>
        {/if}
      </category>
      <category name="{msg meaning="Turtle.catMath" desc="TODO"}Math{/msg}">
        <block type="math_number"></block>
        {if $ij.page == 3}
          <block type="math_arithmetic" inline="true">
            <title name="OP">DIVIDE</title>
          </block>
          {if $ij.level == 8}
            <block type="math_single"></block>
            <block type="math_trig"></block>
            <block type="math_constant"></block>
            <block type="math_round"></block>
            <block type="math_modulo"></block>
            <block type="math_random_int">
              <value name="FROM">
                <block type="math_number">
                  <title name="NUM">1</title>
                </block>
              </value>
              <value name="TO">
                <block type="math_number">
                  <title name="NUM">100</title>
                </block>
            </value>
          </block>
          <block type="math_random_float"></block>
        {/if}
      {/if}
      </category>
      {if ($ij.page == 3 and $ij.level >= 7)}
        <category name="{msg meaning="Turtle.catVariables" desc="TODO"}Variables{/msg}" custom="VARIABLE"></category>
        <category name="{msg meaning="Turtle.catProcedures" desc="TODO"}Functions{/msg}" custom="PROCEDURE"></category>
      {elseif ($ij.page == 2 and $ij.level >= 5)}
        // Don't use custom="VARIABLES" because we want to hide "length".
        <category name="{msg meaning="Turtle.catVariables" desc="TODO"}Variables{/msg}">
          <block type="variables_get_counter"></block>
        </category>
      {elseif $ij.page == 3 and $ij.level >= 4}
        <category name="{msg meaning="Turtle.catVariables" desc="TODO"}Variables{/msg}">
          {if $ij.level == 7}
            <block type="variables_get_sides"></block>
          {/if}
          <block type="variables_get_length"></block>
        </category>
      {/if}
    {/if}
  </xml>
{/template}
