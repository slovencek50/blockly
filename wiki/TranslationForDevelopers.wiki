#summary Information about translation for Blockly developers

This document provides what developers should know about Blockly translations.  Translators should read [https://code.google.com/p/blockly/wiki/Translation this document] instead.

= Introduction =

Internationalization (i18n) is one of Blockly's top priorities.  See, for example, [https://neil.fraser.name/news/2013/03/16/ CS in VN].  We are proud to have support for right-to-left and left-to-right scripts and that the [http://blockly-demo.appspot.com/static/apps/puzzle/index.html Puzzle application] has been translated into over 50 languages but will not be satisfied until all of Blockly has been.

= !TranslateWiki =
We use [http://www.translatewiki.net TranslateWiki] as our translation console and translator community.  We provide them with the following files:
  * *qqq.json*, mapping message names to _message documentation_ (information for translators).
  * *en.json*, mapping message names to the English-language text.  Note that we use Canadian English.
  * *_LANG_.json*, mapping message names to the appropriate language text.  Messages that have not been translated to the given language will not be present in this file.
_LANG_ is (loosely) an [http://en.wikipedia.org/wiki/IETF_language_tag IETF language tag], such as "de" for German or "pt-br" for Brazilian Portuguese.

Here are links to files for translating the tutorials and applications:
  * [https://code.google.com/p/blockly/source/browse/trunk/apps/qqq.json apps/qqq.json]
  * [https://code.google.com/p/blockly/source/browse/trunk/apps/en.json apps/en.json]
  * [https://code.google.com/p/blockly/source/browse/trunk/apps/de.json apps/de.json] (as one example of a language file).

= Applications and Tutorials =

== Soy-based translation ==

The Blockly applications and tutorials (henceforth referred to as "apps") are built with "Soy", also known as [https://developers.google.com/closure/templates/ Google Closure templates], which has [https://developers.google.com/closure/templates/docs/translation translation tools].  Specifically, all messages appear in files whose name ends with the "soy" extension.   Messages used by multiple apps are defined in [https://code.google.com/p/blockly/source/browse/trunk/apps/common.soy apps/common.soy], and have the prefix "Apps."  Messages used by only a single app are defined in that app's template.soy file, such as [https://code.google.com/p/blockly/source/browse/trunk/apps/maze/template.soy apps/maze/template.soy] and prefixed with the name of the application, such as "Maze.".

=== The msg tag ===
Here is an example of a message definition:

{{{
{msg meaning="Maze.moveForward" 
     desc="block text - Imperative or infinitive of a verb for a person moving 
           (walking) in the direction he/she is facing."}
  move forward
{/msg}
}}}

Notes:
  * The key is defined through the "meaning" attribute: "Maze.moveForward".
  * The message documentation for the translator is defined through the "desc" attribute.  This appears as the value in the qqq.json file.
  * The English language text appears between the "msg" start and end tags.  This appears as the value in the en.json file.
 
A left brace or right brace can be included in an attribute value by using double braces to introduce and close the "msg" tags and writing "{lb}" [left brace] for "{" or "{rb}" for "}", as in this definition:

{{{
{{msg meaning="Puzzle.country1Language" 
      desc="The English language.{lb}{lb}Identical|English{rb}{rb}"}}
  English
{{/msg}}
}}}
(The !TranslateWiki "Identical" tag is shrouded in mystery.  It was added to a Blockly file by a !TranslateWiki wizard, and I was told not to worry about why.)

=== Placement of the msg tag ===
If a message is used only once and the use is within the template, it can be defined where it is used:

{{{
<button class="notext" 
        title="{msg meaning="Apps.codeTooltip" 
                    desc="tooltip (pop-up help) for button; pressing the button causes a program in the JavaScript computer language to be displayed, based on the program created by the user."}
                 See generated JavaScript code.
            {/msg}" 
        onclick="BlocklyApps.showCode(this);">
  <img src="../../media/1x1.gif" class="code icon21">
</button>
}}}

If a message is used from another file, such as maze.js or blocks.js, it must be declared within a span:

{{{
    <span id="Maze_moveForward">{msg meaning="Maze.moveForward" desc="block text - Imperative or infinitive of a verb for a person moving (walking) in the direction he/she is facing."}move forward{/msg}</span>
}}}
By convention, the id of the span is the same as the "meaning" key but replaces periods with underscores.  The message is referenced from code through the method {{{BlocklyApps.getMsg()}}}:

{{{
Blockly.Language.maze_moveForward = {
  // Block for moving forward.  [A portion of the following code is omitted.]
  init: function() {
    this.setColour(290);
    this.appendDummyInput()
        .appendTitle(BlocklyApps.getMsg('Maze_moveForward'));
  }
};
}}}



<td>
{msg meaning="Maze.helpIfElse" desc="IBID"}If-else blocks will do one thing or the other.{/msg}
</td>
}}}