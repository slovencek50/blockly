#summary Creating drop-down menus.
#labels Phase-Implementation

*[CustomBlocks Creating Custom Blocks]: [DefiningBlocks Defining Blocks]: Drop-down Menus*

Drop-down menus can be somewhat complicated title elements used in creating blocks.

== Language Neutrality ==

{{{
    input.appendTitle('hello');
    var dropdown = new Blockly.FieldDropdown([['world', 'WORLD'], ['computer', 'CPU']]);
    input.appendTitle(dropdown, 'MODE');
}}}

http://blockly.googlecode.com/svn/wiki/appendTitleDropdown.png

The `FieldDropdown` object is created with a list of menu options.  Each option is made up of two strings.  The first is the human-readable text to display.  The second is a string constant which is used when saving the option to XML.  This separation allows a dropdown menu's setting to be preserved between languages.  For instance an English (`en/`) version of a block may define `[['left', 'LEFT'], ['right', 'RIGHT']]` while a German (`de/`) version of the same block would define `[['links', 'LEFT'], ['rechts', 'RIGHT']]`.

== Prefix/Suffix Matching ==

If all the menu options of a `FieldDropdown` object share common prefix and/or suffix words, these words are automatically factored out and inserted as static text.  For example, the same "hello world" code above could be rewritten like this:

{{{
    var dropdown = new Blockly.FieldDropdown([['hello world', 'WORLD'], ['hello computer', 'CPU']]);
    input.appendTitle(dropdown, 'MODE');
}}}

One advantage of this approach is that the block is easier for to translate into other languages.  The earlier code has the strings `'hello'`, `'world'`, and `'computer'`, whereas the revised code has the strings `'hello world'` and `'hello computer'`.  Translators have a much easier time translating phrases than words in isolation.

Another advantage of this approach is that word order often changes between languages.  Imagine a language that used `'world hello'` and `'computer hello'`.  The suffix matching algorithm will detect the common `'hello'` and display it after the drop-down.

However, sometimes the prefix/suffix matching fails.  There are some cases where two words should always go together and the prefix should not be factored out.  For example `'drive red car'` and `'drive red truck'` should arguably only have `'drive'` factored out, not `'drive red'`.  The Unicode non-breaking space `'\u00A0'` may be used in place of a regular space to suppress the prefix/suffix matcher.  Thus the above example can be fixed with `'drive red\u00A0car'` and `'drive red\u00A0truck'`.

Another place where prefix/suffix matching fails is in languages that do not separate individual words with spaces.  Chinese is a good example.  The string `'訪問中國'` means `'visit China'`, note the lack of spaces between words.  Collectively, the last two characters ('`中國`') are the word for `'China'`, but if split they would individually they would mean `'centre'` and `'country'` respectively.  To make prefix/suffix matching work in languages such as Chinese, just insert a space where the break should be.  For example `'訪問 中國'` and `'訪問 美國`' would result in "visit [China/USA]", whereas `'訪問 中 國'` and `'訪問 美 國`' would result in "visit [centre/beautiful] country".

== Dynamic Menu ==

Instead of providing a static list of options, one can provide a function that returns a list of options when called.  This allows for dynamic menus.  See `variables_get` for an example.

Prefix/suffix matching does not occur for dynamic menus.

== Change Handler ==

Optionally, the `FieldDropdown` constructor can also take a second argument which becomes the validation function or change handler.  See `math_number_property` for an example of where changing a dropdown modifies the block's shape.
